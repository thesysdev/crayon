---
description: Comprehensive SCSS styling guidelines for the Crayon React UI component library
globs: *.scss,*.tsx,*.ts
alwaysApply: true
---

# Crayon UI Styling System

## Overview

Crayon UI uses a comprehensive design system with SCSS utilities, CSS custom properties, and consistent component patterns. All styling must follow these guidelines to maintain design consistency and component reusability.

## Core Principles

### 1. Use cssUtils.scss for All Design Tokens

**Always import and use `cssUtils.scss` instead of hardcoded values:**

```scss
@use "../../cssUtils" as cssUtils;

// ✅ Correct - Use design tokens
.my-component {
  background-color: cssUtils.$bg-container;
  color: cssUtils.$primary-text;
  padding: cssUtils.$spacing-m;
  border-radius: cssUtils.$rounded-m;
  @include cssUtils.typography(body, default);
}

// ❌ Incorrect - Hardcoded values
.my-component {
  background-color: #ffffff;
  color: #000000;
  padding: 16px;
  border-radius: 8px;
  font-family: "Inter", sans-serif;
}
```

### 2. Component Architecture

#### File Structure

Each component should follow this structure:

```FileStructure
components/ComponentName/
├── ComponentName.tsx      # Main component
├── ComponentName.scss     # Component styles
├── index.ts              # Exports
├── dependencies.ts       # External dependencies
└── stories/              # Storybook stories
    └── ComponentName.stories.tsx
```

#### CSS Class Naming Convention

Use the `.crayon-component-name` prefix with BEM-like modifiers:

```scss
.crayon-button {
  // Base styles

  &-primary {
    // Primary variant styles
  }

  &-secondary {
    // Secondary variant styles
  }

  &-small {
    // Small size variant
  }

  &-large {
    // Large size variant
  }

  &__icon {
    // Component element (like icon inside button)
  }

  &--disabled {
    // Component state modifier
  }
}
```

### 3. Typography System

#### Available Typography Mixins

```scss
// Body text variants
@include cssUtils.typography(body, default); // Regular body text
@include cssUtils.typography(body, small); // Smaller body text
@include cssUtils.typography(body, large); // Larger body text
@include cssUtils.typography(body, heavy); // Bold body text

// Label variants
@include cssUtils.typography(label, default); // Regular labels
@include cssUtils.typography(label, small); // Small labels
@include cssUtils.typography(label, large); // Large labels

// Heading variants
@include cssUtils.typography(heading, large); // H1 equivalent
@include cssUtils.typography(heading, medium); // H2 equivalent
@include cssUtils.typography(heading, small); // H3 equivalent

// Number variants (for data display)
@include cssUtils.typography(number, default); // Regular numbers
@include cssUtils.typography(number, large); // Large numbers
@include cssUtils.typography(number, title); // Title numbers
```

### 4. Color System

#### Background Colors

```scss
cssUtils.$bg-fill          // Main background
cssUtils.$bg-container     // Card/container backgrounds
cssUtils.$bg-overlay       // Modal/overlay backgrounds
cssUtils.$bg-sunk          // Input field backgrounds
cssUtils.$bg-elevated      // Elevated surfaces
cssUtils.$bg-danger        // Error/danger backgrounds
cssUtils.$bg-success       // Success backgrounds
cssUtils.$bg-info          // Info backgrounds
```

#### Interactive Colors

```scss
cssUtils.$interactive-default      // Default button background
cssUtils.$interactive-hover        // Hover state
cssUtils.$interactive-pressed      // Pressed/active state
cssUtils.$interactive-disabled     // Disabled state
cssUtils.$interactive-accent       // Primary action color
```

#### Text Colors

```scss
cssUtils.$primary-text      // Main text color
cssUtils.$secondary-text    // Secondary/muted text
cssUtils.$disabled-text     // Disabled text
cssUtils.$accent-primary-text    // Primary accent text
cssUtils.$success-primary-text   // Success text
cssUtils.$danger-primary-text    // Error text
```

#### Stroke/Border Colors

```scss
cssUtils.$stroke-default           // Default borders
cssUtils.$stroke-interactive-el    // Interactive element borders
cssUtils.$stroke-emphasis          // Emphasis borders
cssUtils.$stroke-accent            // Accent borders
cssUtils.$stroke-danger            // Error borders
```

### 5. Spacing System

Use the predefined spacing scale:

```scss
cssUtils.$spacing-0     // 0px
cssUtils.$spacing-3xs   // 2px
cssUtils.$spacing-2xs   // 4px
cssUtils.$spacing-xs    // 8px
cssUtils.$spacing-s     // 12px
cssUtils.$spacing-m     // 16px
cssUtils.$spacing-l     // 20px
cssUtils.$spacing-xl    // 24px
cssUtils.$spacing-2xl   // 32px
cssUtils.$spacing-3xl   // 40px
```

### 6. Border Radius System

```scss
cssUtils.$rounded-0     // 0px (sharp corners)
cssUtils.$rounded-3xs   // 2px
cssUtils.$rounded-2xs   // 4px
cssUtils.$rounded-xs    // 6px
cssUtils.$rounded-s     // 8px
cssUtils.$rounded-m     // 12px
cssUtils.$rounded-l     // 16px
cssUtils.$rounded-xl    // 20px
cssUtils.$rounded-full  // 9999px (fully rounded)
```

### 7. Shadow System

```scss
cssUtils.$shadow-s      // Small shadow
cssUtils.$shadow-m      // Medium shadow
cssUtils.$shadow-l      // Large shadow
cssUtils.$shadow-xl     // Extra large shadow
cssUtils.$shadow-2xl    // 2X large shadow
cssUtils.$shadow-3xl    // 3X large shadow
```

## Component Patterns

### Standard Component Variants

Most components should support these variants:

#### Size Variants

```scss
&-small {
  padding: calc(cssUtils.$spacing-2xs - 1px) cssUtils.$spacing-s;
  @include cssUtils.typography(body, small);
}

&-medium {
  padding: calc(cssUtils.$spacing-xs - 1px) cssUtils.$spacing-m;
  @include cssUtils.typography(body, default);
}

&-large {
  padding: calc(cssUtils.$spacing-s - 1px) cssUtils.$spacing-l;
  @include cssUtils.typography(body, large);
}
```

#### Button Variants

```scss
&-primary {
  background-color: cssUtils.$interactive-accent;
  color: cssUtils.$accent-primary-text;
  border-color: cssUtils.$stroke-accent;

  &:not(:disabled):hover {
    background-color: cssUtils.$interactive-accent-hover;
  }

  &:disabled {
    background-color: cssUtils.$interactive-accent-disabled;
    cursor: not-allowed;
  }
}

&-secondary {
  background-color: cssUtils.$interactive-default;
  color: cssUtils.$primary-text;
  border-color: cssUtils.$stroke-interactive-el;

  &:not(:disabled):hover {
    background-color: cssUtils.$interactive-hover;
  }
}
```

### Form Components Pattern

```scss
.crayon-input {
  @include cssUtils.typography(body, default);
  border: 1px solid cssUtils.$stroke-default;
  border-radius: cssUtils.$rounded-m;
  background-color: cssUtils.$bg-sunk;
  color: cssUtils.$primary-text;

  &::placeholder {
    color: cssUtils.$secondary-text;
  }

  &:focus {
    outline: none;
    border-color: cssUtils.$stroke-emphasis;
  }

  &:disabled {
    background-color: cssUtils.$bg-sunk;
    color: cssUtils.$disabled-text;
    cursor: not-allowed;
  }

  &-error {
    border-color: cssUtils.$stroke-danger-emphasis;
  }
}
```

## Best Practices

### 1. Avoid Magic Numbers

Always use design tokens instead of hardcoded values:

```scss
// ✅ Good
padding: cssUtils.$spacing-m;
border-radius: cssUtils.$rounded-m;

// ❌ Bad
padding: 16px;
border-radius: 8px;
```

### 2. Consistent State Handling

Use the `:not(:disabled)` pattern for hover/active states:

```scss
&:not(:disabled):hover {
  background-color: cssUtils.$interactive-hover;
}

&:not(:disabled):active {
  background-color: cssUtils.$interactive-pressed;
}
```

### 3. Responsive Design

For responsive components, use CSS custom properties that can be controlled via JavaScript:

```scss
.my-responsive-component {
  gap: var(--component-gap, cssUtils.$spacing-m);
  padding: var(--component-padding, cssUtils.$spacing-m);
}
```

### 4. Component Composition

Prefer composition over complex variants. Create small, focused components that can be combined:

```tsx
// ✅ Good - Composable
<Card>
  <CardHeader>
    <Title>Card Title</Title>
  </CardHeader>
  <CardContent>
    <Text>Content</Text>
    <Button variant="primary">Action</Button>
  </CardContent>
</Card>

// ❌ Avoid - Overly complex single component
<ComplexCard
  title="Card Title"
  content="Content"
  buttonText="Action"
  buttonVariant="primary"
  showHeader={true}
  headerVariant="large"
/>
```

### 5. CSS Custom Properties for Theming

Use CSS custom properties for values that might need to be overridden:

```scss
.crayon-themeable-component {
  --component-bg: #{cssUtils.$bg-container};
  --component-text: #{cssUtils.$primary-text};

  background-color: var(--component-bg);
  color: var(--component-text);
}
```

### 6. Accessibility Considerations

- Always include focus states
- Use appropriate color contrasts (handled by design tokens)
- Support keyboard navigation
- Include proper ARIA attributes in component markup

### 7. Performance

- Avoid deeply nested selectors
- Use efficient CSS selectors
- Minimize CSS specificity conflicts
- Consider CSS-in-JS only when necessary (prefer SCSS for static styles)

## When to Create New Components

### ✅ Create a new component when

- The UI pattern is reusable across multiple features
- It has its own distinct behavior and API
- It needs specific accessibility features
- It represents a semantic UI concept (Button, Input, Card, etc.)

### ✅ Extend existing components when

- Adding a variant that fits the existing API
- Creating a domain-specific version of a generic component
- The new component is just a styled wrapper

### ❌ Don't create new components for

- One-off styling needs (use CSS classes or inline styles)
- Layout-only components (use CSS Grid/Flexbox)
- Text styling (use typography mixins)

## Migration Guide

When updating existing components:

1. **Audit current styles** - Check for hardcoded values
2. **Replace with tokens** - Use cssUtils variables
3. **Update naming** - Ensure BEM-like class names
4. **Add missing states** - Include hover, focus, disabled, active states
5. **Test thoroughly** - Verify all variants work correctly

## Tooling

- **SCSS Compilation**: `pnpm build:scss`
- **Linting**: ESLint with custom rules
- **Storybook**: For component development and testing
- **Design Tokens**: All available in `cssUtils.scss`

## Questions?

When in doubt:

1. Check existing components for similar patterns
2. Look at `cssUtils.scss` for available tokens
3. Ask in #design-system Slack channel
4. Reference the design system documentation
