@use "sass:map";
@use "../../cssUtils" as cssUtils;

.crayon-button-base {
  box-sizing: border-box;
  @include cssUtils.typography(body, default);
  padding: map.get(cssUtils.$spacing, "m");
  border-radius: map.get(cssUtils.$radius, "m");
  border: 1px solid transparent;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  gap: map.get(cssUtils.$spacing, "2xs");
  align-items: center;

  // Primary variant
  &-primary {
    background-color: map.get(cssUtils.$colors, "fills", "brand-el");
    color: map.get(cssUtils.$colors, "text", "brand");
    &:hover {
      background-color: map.get(cssUtils.$colors, "fills", "brand-el-hover");
    }
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }
  // Secondary variant
  &-secondary {
    background-color: map.get(cssUtils.$colors, "fills", "container");
    color: map.get(cssUtils.$colors, "text", "primary");
    border-color: map.get(cssUtils.$colors, "strokes", "default");
    &:hover {
      background-color: map.get(cssUtils.$colors, "fills", "container-hover");
    }
    &:disabled {
      color: map.get(cssUtils.$colors, "text", "disabled");
      border-color: map.get(cssUtils.$colors, "text", "disabled");
      cursor: not-allowed;
    }
  }
  // Tertiary variant
  &-tertiary {
    background-color: transparent;
    color: map.get(cssUtils.$colors, "text", "primary");
    &:hover {
      background-color: map.get(cssUtils.$colors, "fills", "container-hover");
    }
    &:disabled {
      color: map.get(cssUtils.$colors, "text", "disabled");
      cursor: not-allowed;
    }
  }

  // Sizes
  &-small {
    padding: map.get(cssUtils.$spacing, "2xs") map.get(cssUtils.$spacing, "xs");
  }

  &-medium {
    padding: map.get(cssUtils.$spacing, "xs") map.get(cssUtils.$spacing, "m");
  }

  &-large {
    padding: map.get(cssUtils.$spacing, "s") map.get(cssUtils.$spacing, "m");
  }
}
